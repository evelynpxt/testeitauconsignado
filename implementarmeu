Inicializando projeto apos configurar Api no Springboot

package itau.consignado.Api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiApplication.class, args);
	}

}

Controller cliente

package itau.consignado.Api.controller;


import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("cliente")

public class clientecontroller<json> {

    @PostMapping
    public <json> void cadastrar(String json) {

        System.out.println(json);

    }
}
Dentro do Isomnia Criar Json 


{
  "nome": "Rodrigo Ferreira",
  "correntista": "Sim",
  "cpf": "123456",
  "segmento": "Varejo",
  "convenio": "INSS"
}
Fase 1

public class Cliente {
    private String cpf;
    private boolean correntista;
    private String segmento;
    private String convenio;

    public Cliente(String cpf, boolean correntista, String segmento, String convenio) {
        this.cpf = cpf;
        this.correntista = correntista;
        this.segmento = segmento;
        this.convenio = convenio;
    }

    public String getCpf() {
        return cpf;
    }

    public boolean isCorrentista() {
        return correntista;
    }

    public String getSegmento() {
        return segmento;
    }

    public String getConvenio() {
        return convenio;
    }

    @Override
    public String toString() {
        return "Cliente{" +
                "cpf='" + cpf + '\'' +
                ", correntista=" + correntista +
                ", segmento='" + segmento + '\'' +
                ", convenio='" + convenio + '\'' +
                '}';
    }
}


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Consignado {
    private static Map<String, Cliente> clientes = new HashMap<>();

    static {
        // Inicialização de dados de exemplo
        clientes.put("12345678900", new Cliente("12345678900", true, "Varejo", "Empresa Privada (EP)"));
        clientes.put("23456789011", new Cliente("23456789011", true, "Uniclass", "Orgão Público (OP)"));
        clientes.put("34567890122", new Cliente("34567890122", false, "", ""));
        clientes.put("45678901233", new Cliente("45678901233", true, "Person", "INSS"));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Digite o CPF do cliente: ");
        String cpf = scanner.nextLine();

        Cliente cliente = clientes.get(cpf);
        if (cliente == null) {
            System.out.println("Cliente não encontrado.");
        } else {
            if (cliente.isCorrentista()) {
                System.out.println("Cliente é correntista.");
                System.out.println("Segmento: " + cliente.getSegmento());
            } else {
                System.out.println("Cliente não é correntista.");
            }
            System.out.println("Convênio: " + cliente.getConvenio());
        }
    }
}

Efetudo banco de dados no MySQL.

Teste 2

Efetuado enums para chamar as taxas e numoeros dentro da aplicação.
Testado com kotlin mais defini ficar em Java.

Simulador Consignado

package itau.consignado.Api.simuladoconsignado;

enum Segmento {
    VAREJO(24),
    UNICLASS(36),
    PERSON(48);

    private final int maxParcelas;

    Segmento(int maxParcelas) {
        this.maxParcelas = maxParcelas;
    }

    public int getMaxParcelas() {
        return maxParcelas;
    }
}

package itau.consignado.Api.simuladoconsignado;

enum Segmento {
    VAREJO(24),
    UNICLASS(36),
    PERSON(48);

    private final int maxParcelas;

    Segmento(int maxParcelas) {
        this.maxParcelas = maxParcelas;
    }

    public int getMaxParcelas() {
        return maxParcelas;
    }
}

package itau.consignado.Api.simuladoconsignado;

public class EmprestimoSimulador {
    public static Simulacao simularEmprestimo(String cpf, Convenio convenio, Segmento segmento, double valorSolicitado, int quantidadeParcelas, boolean isCorrentista) {
        if (quantidadeParcelas > segmento.getMaxParcelas()) {
            throw new IllegalArgumentException("Quantidade de parcelas excede o limite permitido para o segmento.");
        }

        if (!isCorrentista && quantidadeParcelas > 12) {
            throw new IllegalArgumentException("Clientes não correntistas podem simular no máximo 12 parcelas.");
        }

        double taxa = convenio.getTaxa();
        if (isCorrentista) {
            taxa *= 0.95;
        }

        return new Simulacao(cpf, convenio, valorSolicitado, taxa, quantidadeParcelas);
    }

    public static void main(String[] args) {
        try {
            Simulacao simulacao = simularEmprestimo("123.456.789-00", Convenio.EMPRESA_PRIVADA, Segmento.PERSON, 10000, 24, true);
            System.out.println(simulacao);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }
}

package itau.consignado.Api.simuladoconsignado;

import java.text.SimpleDateFormat;
import java.util.Date;

class Simulacao {
    private static int contadorId = 0;

    private final int id;
    private final String data;
    private final String cpf;
    private final Convenio convenio;
    private final double valorSolicitado;
    private final double taxaAplicada;
    private final int quantidadeParcelas;
    private final double valorTotalPago;
    private final double valorParcela;

    public Simulacao(String cpf, Convenio convenio, double valorSolicitado, double taxaAplicada, int quantidadeParcelas) {
        this.id = ++contadorId;
        this.data = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
        this.cpf = cpf;
        this.convenio = convenio;
        this.valorSolicitado = valorSolicitado;
        this.taxaAplicada = taxaAplicada;
        this.quantidadeParcelas = quantidadeParcelas;
        this.valorTotalPago = calcularValorTotalPago();
        this.valorParcela = this.valorTotalPago / quantidadeParcelas;
    }

    private double calcularValorTotalPago() {
        return valorSolicitado * (1 + (taxaAplicada / 100) * quantidadeParcelas);
    }

    @Override
    public String toString() {
        return "Simulacao{" +
                "id=" + id +
                ", data='" + data + '\'' +
                ", cpf='" + cpf + '\'' +
                ", convenio=" + convenio +
                ", valorSolicitado=" + valorSolicitado +
                ", taxaAplicada=" + taxaAplicada +
                ", quantidadeParcelas=" + quantidadeParcelas +
                ", valorTotalPago=" + valorTotalPago +
                ", valorParcela=" + valorParcela +
                '}';
    }
}

Seguindo para faze 3






